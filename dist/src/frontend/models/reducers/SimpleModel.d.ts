/***********************************************************************************
 *                                                                                  *
 *   Redux Reducers and React Context API Provider/Consumer for state SimpleModel   *
 *   Generated by ts2redux from Source file ../SimpleModel.ts                       *
 *                                                                                  *
 ***********************************************************************************/
/**
 * @redux true
 */
export declare class SimpleModel {
    items: any[];
    getItems(): Promise<void>;
    readonly myItems: any[];
}
import { IState } from "./index";
import * as React from "react";
export interface IContainerPropsMethods {
    getItems: () => any;
    ReduxDispatch: (action: any) => void;
}
export interface ISimpleModel {
    items: any[];
}
export declare const itemsSelectorFn: (state: ISimpleModel) => any[];
export declare const myItemsSelectorFnCreator: () => import("reselect").OutputSelector<ISimpleModel, any[], (res: any[]) => any[]>;
export declare const myItemsSelector: import("reselect").OutputSelector<ISimpleModel, any[], (res: any[]) => any[]>;
export interface IContainerPropsState extends ISimpleModel {
    myItems: any[];
}
export interface IProps extends IContainerPropsState, IContainerPropsMethods {
}
export declare function mapStateToPropsWithKeys<K extends keyof IContainerPropsState>(state: IState, keys: K[]): Pick<IContainerPropsState, K>;
export declare const mapStateToProps: (state: IState) => IContainerPropsState;
export declare const mapDispatchToProps: (dispatch: any) => IContainerPropsMethods;
export declare function ConnectKeys<K extends keyof ISimpleModel, J extends keyof IContainerPropsMethods>(keys: K[], methods: J[]): any;
export declare const StateConnector: any;
/**
 * @generated true
 */
export declare class RSimpleModel {
    private _state?;
    private _dispatch?;
    private _getState?;
    constructor(state?: ISimpleModel, dispatch?: (action: any) => void, getState?: () => any);
    items: any[];
    getItems(): Promise<void>;
    static getItems(): (dispatcher: any, getState: any) => void;
}
export declare const SimpleModelEnums: {
    SimpleModel_items: string;
};
export declare const SimpleModelReducer: (state: ISimpleModel, action: any) => ISimpleModel;
/********************************
 * React Context API component   *
 ********************************/
export declare const SimpleModelContext: React.Context<IProps>;
export declare const SimpleModelConsumer: React.ComponentType<React.ConsumerProps<IProps>>;
export declare class SimpleModelProvider extends React.Component {
    state: ISimpleModel;
    lastSetState: ISimpleModel;
    private __devTools;
    private __selectormyItems;
    constructor(props: any);
    componentWillUnmount(): void;
    setStateSync(state: ISimpleModel): void;
    getItems(): Promise<void>;
    render(): JSX.Element;
}
