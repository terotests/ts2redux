/********************************************************************************
 *                                                                               *
 *   Redux Reducers and React Context API Provider/Consumer for state IncModel   *
 *   Generated by ts2redux from Source file ../IncModel.ts                       *
 *                                                                               *
 ********************************************************************************/

export class IncModel {
  cnt = 0;

  // placeholder routine
  async ReduxDispatch(action: any) {}

  increment() {
    this.cnt++;
  }
  decrement() {
    this.cnt--;
  }
}

import * as immer from "immer";
import { connect } from "react-redux";
import { IState } from "./index";
import * as React from "react";

export interface IContainerPropsMethods {
  ReduxDispatch: (action: any) => any;
  increment: () => any;
  decrement: () => any;
}
export interface IIncModel {
  cnt: number;
}

export type IContainerPropsState = IIncModel;
export interface IProps extends IContainerPropsState, IContainerPropsMethods {}

function pick<T, K extends keyof T>(o: T, ...props: K[]) {
  return props.reduce((a, e) => ({ ...a, [e]: o[e] }), {}) as Pick<T, K>;
}
export function mapStateToPropsWithKeys<K extends keyof IContainerPropsState>(
  state: IState,
  keys: K[]
): Pick<IContainerPropsState, K> {
  return pick(state.IncModel as IContainerPropsState, ...keys);
}

export const mapStateToProps = (state: IState): IContainerPropsState => {
  return {
    cnt: state.IncModel.cnt
  };
};

function mapDispatchToPropsWithKeys<K extends keyof IContainerPropsMethods>(
  dispatch: any,
  keys: K[]
): Pick<IContainerPropsMethods, K> {
  return pick(mapDispatchToProps(dispatch), ...keys);
}

export const mapDispatchToProps = (dispatch: any): IContainerPropsMethods => {
  return {
    ReduxDispatch: (action: any) => {
      return dispatch(action);
    },
    increment: () => {
      return dispatch(RIncModel.increment());
    },
    decrement: () => {
      return dispatch(RIncModel.decrement());
    }
  };
};

export function ConnectKeys<
  K extends keyof IIncModel,
  J extends keyof IContainerPropsMethods
>(keys: K[], methods: J[]) {
  return connect(
    (state: IState) => mapStateToPropsWithKeys(state, keys),
    (dispatch: any) => mapDispatchToPropsWithKeys(dispatch, methods)
  );
}

export const StateConnector = connect(
  mapStateToProps,
  mapDispatchToProps
);

const initIncModel = () => {
  const o = new IncModel();
  return {
    cnt: o.cnt
  };
};
const initWithMethodsIncModel = () => {
  const o = new IncModel();
  return {
    cnt: o.cnt,
    ReduxDispatch: o.ReduxDispatch,
    increment: o.increment,
    decrement: o.decrement
  };
};

/**
 * @generated true
 */
export class RIncModel {
  private _state?: IIncModel;
  private _dispatch?: (action: any) => void;
  private _getState?: () => any;
  constructor(
    state?: IIncModel,
    dispatch?: (action: any) => void,
    getState?: () => any
  ) {
    this._state = state;
    this._dispatch = dispatch;
    this._getState = getState;
  }
  get cnt(): number {
    if (this._getState) {
      return this._getState().IncModel.cnt;
    } else {
      if (this._state) {
        return this._state.cnt;
      }
    }
    throw "Invalid State in IncModel_cnt";
  }
  set cnt(value: number) {
    if (this._state && typeof value !== "undefined") {
      this._state.cnt = value;
    } else {
      // dispatch change for item cnt
      if (this._dispatch) {
        this._dispatch({ type: IncModelEnums.IncModel_cnt, payload: value });
      }
    }
  }

  // ReduxDispatch

  async ReduxDispatch(action: any) {
    if (typeof this._dispatch !== "undefined") {
      this._dispatch(action);
    }
  }

  public static ReduxDispatch(action: any) {
    return (dispatcher: any, getState: any) => {
      new RIncModel(undefined, dispatcher, getState).ReduxDispatch(action);
    };
  }
  increment() {
    if (this._state) {
      this.cnt++;
    } else {
      if (this._dispatch) {
        this._dispatch({ type: IncModelEnums.IncModel_increment });
      }
    }
  }

  public static increment() {
    return (dispatcher: any, getState: any) => {
      new RIncModel(undefined, dispatcher, getState).increment();
    };
  }
  decrement() {
    if (this._state) {
      this.cnt--;
    } else {
      if (this._dispatch) {
        this._dispatch({ type: IncModelEnums.IncModel_decrement });
      }
    }
  }

  public static decrement() {
    return (dispatcher: any, getState: any) => {
      new RIncModel(undefined, dispatcher, getState).decrement();
    };
  }
}

export const IncModelEnums = {
  IncModel_cnt: "IncModel_cnt",
  IncModel_increment: "IncModel_increment",
  IncModel_decrement: "IncModel_decrement"
};

export const IncModelReducer = (
  state: IIncModel = initIncModel(),
  action: any
) => {
  return immer.produce(state, draft => {
    switch (action.type) {
      case IncModelEnums.IncModel_cnt:
        new RIncModel(draft).cnt = action.payload;
        break;
      case IncModelEnums.IncModel_increment:
        new RIncModel(draft).increment();
        break;
      case IncModelEnums.IncModel_decrement:
        new RIncModel(draft).decrement();
        break;
    }
  });
};
/********************************
 * React Context API component   *
 ********************************/
export const IncModelContext = React.createContext<IProps>(
  initWithMethodsIncModel()
);
export const IncModelConsumer = IncModelContext.Consumer;
let instanceCnt = 1;
export class IncModelProvider extends React.Component {
  public state: IIncModel = initIncModel();
  public lastSetState: IIncModel;
  private __devTools: any = null;
  constructor(props: any) {
    super(props);
    this.lastSetState = this.state;
    this.ReduxDispatch = this.ReduxDispatch.bind(this);
    this.increment = this.increment.bind(this);
    this.decrement = this.decrement.bind(this);
    const devs = window["__REDUX_DEVTOOLS_EXTENSION__"]
      ? window["__REDUX_DEVTOOLS_EXTENSION__"]
      : null;
    if (devs) {
      this.__devTools = devs.connect({ name: "IncModel" + instanceCnt++ });
      this.__devTools.init(this.state);
      this.__devTools.subscribe((msg: any) => {
        if (msg.type === "DISPATCH" && msg.state) {
          this.setState(JSON.parse(msg.state));
        }
      });
    }
  }
  public componentWillUnmount() {
    if (this.__devTools) {
      this.__devTools.unsubscribe();
    }
  }
  public setStateSync(state: IIncModel) {
    this.lastSetState = state;
    this.setState(state);
  }
  // placeholder routine
  async ReduxDispatch(action: any) {
    new RIncModel(
      undefined,
      (action: any) => {
        const nextState = IncModelReducer(this.lastSetState, action);
        if (this.__devTools) {
          this.__devTools.send(action.type, nextState);
        }
        this.setStateSync(nextState);
      },
      () => ({ IncModel: this.lastSetState })
    ).ReduxDispatch(action);
  }
  increment() {
    const nextState = immer.produce(this.state, draft =>
      new RIncModel(draft).increment()
    );
    if (this.__devTools) {
      this.__devTools.send("increment", nextState);
    }
    this.setStateSync(nextState);
  }
  decrement() {
    const nextState = immer.produce(this.state, draft =>
      new RIncModel(draft).decrement()
    );
    if (this.__devTools) {
      this.__devTools.send("decrement", nextState);
    }
    this.setStateSync(nextState);
  }
  public render() {
    return (
      <IncModelContext.Provider
        value={{
          ...this.state,
          ReduxDispatch: this.ReduxDispatch,
          increment: this.increment,
          decrement: this.decrement
        }}
      >
        {" "}
        {this.props.children}
      </IncModelContext.Provider>
    );
  }
}
