/***********************************************************************************
 *                                                                                  *
 *   Redux Reducers and React Context API Provider/Consumer for state SimpleModel   *
 *   Generated by ts2redux from Source file ../SimpleModel.ts                       *
 *                                                                                  *
 ***********************************************************************************/

import axios from "axios";

/**
 * @redux true
 */
export class SimpleModel {
  items: any[] = [];

  /**
   * @dispatch true
   * @param action
   */
  async SimpleDispatch(action: any) {
    // Example of dispatcher routine
  }

  async getItems() {
    this.items = (await axios.get(
      "https://jsonplaceholder.typicode.com/todos"
    )).data;
  }
  get myItems(): any[] {
    return this.items;
  }
}

import * as immer from "immer";
import { createSelector } from "reselect";
import { connect } from "react-redux";
import { IState } from "./index";
import * as React from "react";

export interface IContainerPropsMethods {
  SimpleDispatch: (action: any) => any;
  getItems: () => any;
}
export interface ISimpleModel {
  items: any[];
}
export const itemsSelectorFn = (state: ISimpleModel): any[] => state.items;
export const myItemsSelectorFnCreator = () =>
  createSelector(
    [itemsSelectorFn],
    items => {
      const o = new SimpleModel();
      o.items = items;
      return o.myItems;
    }
  );
export const myItemsSelector = myItemsSelectorFnCreator();

export interface IContainerPropsState extends ISimpleModel {
  myItems: any[];
}
export interface IProps extends IContainerPropsState, IContainerPropsMethods {}

function pick<T, K extends keyof T>(o: T, ...props: K[]) {
  return props.reduce((a, e) => ({ ...a, [e]: o[e] }), {}) as Pick<T, K>;
}
export function mapStateToPropsWithKeys<K extends keyof IContainerPropsState>(
  state: IState,
  keys: K[]
): Pick<IContainerPropsState, K> {
  return pick(state.SimpleModel as IContainerPropsState, ...keys);
}

export const mapStateToProps = (state: IState): IContainerPropsState => {
  return {
    items: state.SimpleModel.items,
    myItems: myItemsSelector(state.SimpleModel)
  };
};

function mapDispatchToPropsWithKeys<K extends keyof IContainerPropsMethods>(
  dispatch: any,
  keys: K[]
): Pick<IContainerPropsMethods, K> {
  return pick(mapDispatchToProps(dispatch), ...keys);
}

export const mapDispatchToProps = (dispatch: any): IContainerPropsMethods => {
  return {
    SimpleDispatch: (action: any) => {
      return dispatch(action);
    },
    getItems: () => {
      return dispatch(RSimpleModel.getItems());
    }
  };
};

export function ConnectKeys<
  K extends keyof ISimpleModel,
  J extends keyof IContainerPropsMethods
>(keys: K[], methods: J[]) {
  return connect(
    (state: IState) => mapStateToPropsWithKeys(state, keys),
    (dispatch: any) => mapDispatchToPropsWithKeys(dispatch, methods)
  );
}

export const StateConnector = connect(
  mapStateToProps,
  mapDispatchToProps
);

const initSimpleModel = () => {
  const o = new SimpleModel();
  return {
    items: o.items
  };
};
const initWithMethodsSimpleModel = () => {
  const o = new SimpleModel();
  return {
    items: o.items,
    SimpleDispatch: o.SimpleDispatch,
    getItems: o.getItems,
    myItems: o.myItems
  };
};

/**
 * @generated true
 */
export class RSimpleModel {
  private _state?: ISimpleModel;
  private _dispatch?: (action: any) => void;
  private _getState?: () => any;
  constructor(
    state?: ISimpleModel,
    dispatch?: (action: any) => void,
    getState?: () => any
  ) {
    this._state = state;
    this._dispatch = dispatch;
    this._getState = getState;
  }
  get items(): any[] {
    if (this._getState) {
      return this._getState().SimpleModel.items;
    } else {
      if (this._state) {
        return this._state.items;
      }
    }
    throw "Invalid State in SimpleModel_items";
  }
  set items(value: any[]) {
    if (this._state && typeof value !== "undefined") {
      this._state.items = value;
    } else {
      // dispatch change for item items
      if (this._dispatch) {
        this._dispatch({
          type: SimpleModelEnums.SimpleModel_items,
          payload: value
        });
      }
    }
  }

  async SimpleDispatch(action: any) {
    if (typeof this._dispatch !== "undefined") {
      this._dispatch(action);
    }
  }

  public static SimpleDispatch(action: any) {
    return (dispatcher: any, getState: any) => {
      new RSimpleModel(undefined, dispatcher, getState).SimpleDispatch(action);
    };
  }
  async getItems() {
    this.items = (await axios.get(
      "https://jsonplaceholder.typicode.com/todos"
    )).data;
  }

  public static getItems() {
    return (dispatcher: any, getState: any) => {
      new RSimpleModel(undefined, dispatcher, getState).getItems();
    };
  }
}

export const SimpleModelEnums = {
  SimpleModel_items: "SimpleModel_items"
};

export const SimpleModelReducer = (
  state: ISimpleModel = initSimpleModel(),
  action: any
) => {
  return immer.produce(state, draft => {
    switch (action.type) {
      case SimpleModelEnums.SimpleModel_items:
        new RSimpleModel(draft).items = action.payload;
        break;
    }
  });
};
/********************************
 * React Context API component   *
 ********************************/
export const SimpleModelContext = React.createContext<IProps>(
  initWithMethodsSimpleModel()
);
export const SimpleModelConsumer = SimpleModelContext.Consumer;
let instanceCnt = 1;
export class SimpleModelProvider extends React.Component {
  public state: ISimpleModel = initSimpleModel();
  public lastSetState: ISimpleModel;
  private __devTools: any = null;
  private __selectormyItems: any = null;
  constructor(props: any) {
    super(props);
    this.lastSetState = this.state;
    this.SimpleDispatch = this.SimpleDispatch.bind(this);
    this.getItems = this.getItems.bind(this);
    this.__selectormyItems = myItemsSelectorFnCreator();
    const devs = window["__REDUX_DEVTOOLS_EXTENSION__"]
      ? window["__REDUX_DEVTOOLS_EXTENSION__"]
      : null;
    if (devs) {
      this.__devTools = devs.connect({ name: "SimpleModel" + instanceCnt++ });
      this.__devTools.init(this.state);
      this.__devTools.subscribe((msg: any) => {
        if (msg.type === "DISPATCH" && msg.state) {
          this.setState(JSON.parse(msg.state));
        }
      });
    }
  }
  public componentWillUnmount() {
    if (this.__devTools) {
      this.__devTools.unsubscribe();
    }
  }
  public setStateSync(state: ISimpleModel) {
    this.lastSetState = state;
    this.setState(state);
  }
  /**
   * @dispatch true
   * @param action
   */
  async SimpleDispatch(action: any) {
    new RSimpleModel(
      undefined,
      (action: any) => {
        const nextState = SimpleModelReducer(this.lastSetState, action);
        if (this.__devTools) {
          this.__devTools.send(action.type, nextState);
        }
        this.setStateSync(nextState);
      },
      () => ({ SimpleModel: this.lastSetState })
    ).SimpleDispatch(action);
  }
  async getItems() {
    new RSimpleModel(
      undefined,
      (action: any) => {
        const nextState = SimpleModelReducer(this.lastSetState, action);
        if (this.__devTools) {
          this.__devTools.send(action.type, nextState);
        }
        this.setStateSync(nextState);
      },
      () => ({ SimpleModel: this.lastSetState })
    ).getItems();
  }
  public render() {
    return (
      <SimpleModelContext.Provider
        value={{
          ...this.state,
          SimpleDispatch: this.SimpleDispatch,
          getItems: this.getItems,
          myItems: this.__selectormyItems(this.state)
        }}
      >
        {" "}
        {this.props.children}
      </SimpleModelContext.Provider>
    );
  }
}
